@page "/register"
@layout AuthLayout
@inject NavigationManager navigationManager
@inject CustomAuthenticationStateProvider authStateProvider

<h1 class="h2 font-weight-normal login-title">
	Register
</h1>

<EditForm class="form-signin" OnValidSubmit="OnSubmit" Model="registerRequest">
	<DataAnnotationsValidator />

	<label for="inputUsername" class="sr-only">User Name</label>
	<InputText id="inputUsername" class="form-control" placeholder="Username" autofocus @bind-Value="@registerRequest.Email" />
	<ValidationMessage For="@(() => registerRequest.Email)" />

	<label for="inputPassword" class="sr-only">Password</label>
	<InputText type="password" id="inputPassword" class="form-control" placeholder="Password" @bind-Value="@registerRequest.Password" />
	<ValidationMessage For="@(() => registerRequest.Password)" />

	<label for="inputPasswordConfirm" class="sr-only">Password Confirmation</label>
	<InputText type="password" id="inputPasswordConfirm" class="form-control" placeholder="Password Confirmation" @bind-Value="@registerRequest.ConfirmPassword" />
	<ValidationMessage For="@(() => registerRequest.ConfirmPassword)" />

	<button class="btn btn-lg btn-primary btn-block" type="submit">Create account</button>

	<label class="text-danger">@error</label>
	<NavLink href="login">
		<h6 class="font-weight-normal text-center">Already have an account? Click here to login</h6>
	</NavLink>
</EditForm>

@functions{ RegisterUser registerRequest { get; set; } = new RegisterUser();
			string error { get; set; }

			async Task OnSubmit()
			{
				error = null;
				try
				{
					await authStateProvider.Register(registerRequest);
					navigationManager.NavigateTo("");
				}
				catch (Exception ex)
				{
					error = ex.Message;
				}
			} }